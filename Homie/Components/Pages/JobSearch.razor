@page "/job-search"

@inject IDbService DbService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageHeader Text="Jobs" />

@if (_loading)
{
    
}
else
{
    <MudGrid Spacing="3">
        <MudItem xs="4">
            <SimpleCard Title="Active Applications" Value="@ActiveCount.ToString()" Typo="Typo.h4" />
        </MudItem>
        <MudItem xs="4">
            <SimpleCard Title="Interviews" Value="@InterviewCount.ToString()" Typo="Typo.h4" />
        </MudItem>
        <MudItem xs="4">
            <SimpleCard Title="Offers" Value="@OfferCount.ToString()" Typo="Typo.h4" />
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-2">
                <MudDataGrid Items="_jobApplications" Height="60vh" QuickFilter="QuickFilter" Elevation="0" ShowColumnOptions="false" ReadOnly="false" FixedHeader FixedFooter Dense>
                    <ToolBarContent>
                        <MudTextField T="string" @bind-Value="_searchQuery" Label="Search positions, companies, etc..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Immediate/>
                        <MudSpacer/>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Position" Title="Position"/>
                        <PropertyColumn Property="x => x.Company" Title="Company"/>
                        <PropertyColumn Property="x => x.Industry" Title="Industry"/>
                        <PropertyColumn Property="x => x.Location" Title="Location"/>
                        <PropertyColumn Property="x => x.DatePosted" Title="Posted" Hideable="true" Hidden="_postedHidden"/>
                        <PropertyColumn Property="x => x.Status" Title="Status">
                            <CellTemplate>
                                @if (JobApplicationStatuses.TryGetValue(context.Item.Status, out var status))
                                {
                                    <MudChip T="string" Style="@($"background-color: {status.Color}11; color: {status.Color}")" Text="@status.Status" Label="true"/>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.DateApplied" Title="Applied"/>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButtonGroup OverrideStyles="false">
                                    @if (!string.IsNullOrEmpty(context.Item.Notes))
                                    {
                                        <MudTooltip Placement="Placement.Top" Arrow>
                                            <TooltipContent>
                                                <MudText>@((MarkupString)context.Item.Notes)</MudText>
                                            </TooltipContent>
                                            <ChildContent>
                                                <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Info"/>
                                            </ChildContent>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Info" Disabled/>
                                    }
                                    <MudIconButton Href="@context.Item.Link" Target="_blank" Icon="@Icons.Material.Filled.Link" Color="Color.Info" Size="Size.Small"/>
                                    <MudIconButton OnClick="_ => ShowEditApplicationDialog(context.Item)" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" Size="Size.Small"/>
                                    <MudIconButton OnClick="_ => DeleteItem(context.Item)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"/>
                                </MudButtonGroup>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="ShowAddApplicationDialog" FullWidth>Add Application</MudButton>
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
}


@code {

    private bool _loading;

    private IEnumerable<Jobs.JobApplication> _jobApplications = [];

    private string _searchQuery = string.Empty;

    private int ActiveCount => _jobApplications.Count(x => x.Status == JobApplicationStatuses.Pending || x.Status == JobApplicationStatuses.Interview);
    private int InterviewCount => _jobApplications.Count(x => x.Status == JobApplicationStatuses.Interview);
    private int OfferCount => _jobApplications.Count(x => x.Status == JobApplicationStatuses.Offer);

    private bool _postedHidden;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        _postedHidden = _jobApplications.All(x => x.DatePosted is null);
    }


    private async Task LoadDataAsync()
    {
        _loading = true;
        await InvokeAsync(StateHasChanged);
        
        _jobApplications = await DbService.GetJobApplicationsAsync();
        
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task ShowAddApplicationDialog()
    {
        var dialog = await DialogService.ShowAsync<AddJobApplicationDialog>();
        await dialog.Result;
        await LoadDataAsync();
    }
    
    
    private async Task ShowEditApplicationDialog(Jobs.JobApplication application)
    {
        var dialog = await DialogService.ShowAsync<EditJobApplicationDialog>("", new DialogParameters<EditJobApplicationDialog>
        {
            { x => x.JobApplication, application }
        });
        await dialog.Result;
        await LoadDataAsync();
    }


    private async Task DeleteItem(Jobs.JobApplication item)
    {
        var confirmed = await DialogService.ShowMessageBox("Confirm Deletion", $"Permanently delete {item}?", yesText: "Delete", noText: "Cancel");
        if (!confirmed.GetValueOrDefault()) return;

        try
        {
            await DbService.DeleteJobApplicationAsync(item.Id);
            Snackbar.Add($"{item} was successfully deleted", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{item} could not be deleted", Severity.Error);
        }
        finally
        {
            await LoadDataAsync();
        }
    }

    private bool QuickFilter(Jobs.JobApplication jobApplication)
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
            return true;

        if (jobApplication.Position != null && jobApplication.Position.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    }
}