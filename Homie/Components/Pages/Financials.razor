@page "/financials/{FinanceType}"

@inject IDbService DbService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation


@if (_financeItemType is not null)
{
    <PageHeader Text="@_financeItemType.GroupTitle" />

    <MudGrid>
        <MudItem Class="d-flex align-center flex-column gap-3" xs="12" md="4">
            <SimpleCard Height="40vh">
                <MudChart
                    Class="pa-4"
                    ChartType="ChartType.Donut"
                    LegendPosition="Position.Right"
                    Width="100%"
                    Height="100%"
                    InputData="_items.Select(x => x.Amount).ToArray()"
                    InputLabels="_items.Select(x => x.Title).ToArray()">
                    <CustomGraphics>
                        <text fill="white" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" font-size="15">Total</text>
                        <text fill="white" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="30">@_items.Sum(x => x.Amount).ToString("C")</text>
                    </CustomGraphics>
                </MudChart>
            </SimpleCard>            
            <SimpleCard Title="Next 4 weeks" Height="43vh">
                <MudDataGrid Items="_upcomingItems" Height="37vh" SortMode="SortMode.None" Breakpoint="Breakpoint.None" ShowColumnOptions="false" Elevation="0" FixedHeader Dense Striped>
                    <Header>
                        <MudChip T="string" Color="_financeItemType == FinanceItemTypes.Income ? Color.Success : Color.Error" Variant="Variant.Text" Size="Size.Small" Label="true">
                            Total: @_upcomingItems.Sum(x => x.ParentItem.Amount).ToString("C")
                        </MudChip>
                    </Header>
                    <Columns>
                        <PropertyColumn Property="x => x.ParentItem.Title" Title="" />
                        <PropertyColumn Property="x => x.ParentItem.Amount" Title="" Format="C" />
                        <PropertyColumn Property="x => x.OccurrenceDate" Title="" Format="ddd. MMM. dd" />
                    </Columns>
                </MudDataGrid>
            </SimpleCard>
        </MudItem>
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-2">
                <MudDataGrid Items="_items" Height="78vh" Elevation="0" ShowColumnOptions="false" FixedHeader FixedFooter Dense>
                    <Columns>
                        <PropertyColumn Property="x => x.Title" Title="Title"/>
                        <PropertyColumn Property="x => x.Amount" Title="Amount" Format="C" />
                        <PropertyColumn Property="x => x.Frequency" Title="Frequency">
                            <CellTemplate>
                                @if (Frequencies.TryGetValue(context.Item.Frequency, out var frequency))
                                {
                                    <MudChip T="string" Text="@frequency.Value" Style="@($"color: {frequency.Color}; background-color: {frequency.Color}11")" Label="true" />
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">@context.Item.Frequency</MudText>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButtonGroup OverrideStyles="false">
                                    <MudTooltip Placement="Placement.Top" Arrow>
                                        <TooltipContent>
                                            <div class="d-flex align-center flex-row gap-0">
                                                <MudText Typo="Typo.caption">@context.Item.StartDate.Value.ToString("MMM dd/yy").Replace('-', '/')</MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" Size="Size.Small" />
                                                <MudText Typo="Typo.caption">@context.Item.EndDate.Value.ToString("MMM dd/yy").Replace('-', '/')</MudText>
                                            </div>
                                        </TooltipContent>
                                        <ChildContent>
                                            <MudIconButton OnClick="_ => ShowEditTransactionDialog(context.Item)" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" Size="Size.Small"/>
                                        </ChildContent>
                                    </MudTooltip>
                                    <MudIconButton OnClick="_ => DeleteItem(context.Item)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"/>
                                </MudButtonGroup>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="ShowAddTransactionDialog" FullWidth>Add @_financeItemType.Title</MudButton>
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {

    [Parameter, EditorRequired]
    public required string FinanceType { get; set; }

    private FinanceItemType? _financeItemType;
    
    private List<Finances.FinanceItem> _items = [];
    private List<Finances.FinanceOccurrence> _upcomingItems = [];

    private DateTime _today { get; } = DateTime.UtcNow.AddHours(-4);


    protected override async Task OnParametersSetAsync()
    {
        if (_financeItemType is not null && _financeItemType.Type == FinanceType) return;
        
        if (!FinanceItemTypes.TryGetValue(FinanceType, out _financeItemType))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (_financeItemType is null) return;
        
        _items = (await DbService.GetFinancialsAsync(_financeItemType)).ToList();
        
        _upcomingItems = _items
            .SelectMany(x => x.TimeSeries)
            .Where(x => x.OccurrenceDate > _today && x.OccurrenceDate < _today.AddDays(4 * 7))
            .OrderBy(x => x.OccurrenceDate)
            .ToList();
        
        await InvokeAsync(StateHasChanged);
    }


    private async Task ShowAddTransactionDialog()
    {
        var dialog = await DialogService.ShowAsync<AddTransactionItemDialog>("", new DialogParameters<AddTransactionItemDialog>
        {
            { x => x.FinanceItemType, _financeItemType }
        });
        await dialog.Result;
        await LoadDataAsync();
    }


    private async Task ShowEditTransactionDialog(Finances.FinanceItem finance)
    {
        var dialog = await DialogService.ShowAsync<EditTransactionItemDialog>("", new DialogParameters<EditTransactionItemDialog>
        {
            { x => x.Finance, finance }
        });
        await dialog.Result;
        await LoadDataAsync();
    }


    private async Task DeleteItem(Finances.FinanceItem item)
    {
        var confirmed = await DialogService.ShowMessageBox("Confirm Deletion", $"Permanently delete {item.Title}?", yesText: "Delete", noText: "Cancel");
        if (!confirmed.GetValueOrDefault()) return;

        try
        {
            await DbService.DeleteFinanceItemAsync(item.Id);
            Snackbar.Add($"{item.Title} was successfully deleted", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"{item.Title} could not be deleted", Severity.Error);
        }
        finally
        {
            await LoadDataAsync();
        }
    }
    
}