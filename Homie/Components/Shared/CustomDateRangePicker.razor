<MudButton OnClick="OnClick" StartIcon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small">@_buttonText</MudButton>

<MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
    <MudDialog @bind-Visible="_pickerOpen" Options="new DialogOptions { BackdropClick = true }">
        <DialogContent>
            @PickerContent
        </DialogContent>
    </MudDialog>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert>
    <MudDrawer @bind-Open="_pickerOpen" Variant="DrawerVariant.Temporary" Anchor="Anchor.Bottom" OverlayAutoClose>
        @PickerContent
    </MudDrawer>
</MudHidden>

@code {

    [Parameter]
    public DateTime? DateStart { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateStartChanged { get; set; }

    [Parameter]
    public DateTime? DateEnd { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateEndChanged { get; set; }
    
    [Parameter]
    public EventCallback<string> OnClose { get; set; }

    private readonly string[] _allMonths = System.Globalization.DateTimeFormatInfo.CurrentInfo.MonthNames;
    
    private DateTime _dateStart;
    private DateTime _dateEnd;
    private DateRange _dateRange
    {
        get => new(_dateStart, _dateEnd);
        set
        {
            _dateStart = value.Start ?? _dateStart;
            _dateEnd = value.End ?? _dateEnd;
        }
    }

    private string _buttonText = string.Empty;

    private bool customDates;
    private bool _customDates
    {
        get => customDates;
        set
        {
            if (customDates != value && !value)
            {
                _dateStart = new DateTime(_dateStart.Year, _dateStart.Month, 1);
                _dateEnd = new DateTime(_dateStart.Year, _dateStart.Month, DateTime.DaysInMonth(_dateStart.Year, _dateStart.Month));
            }

            customDates = value;
        }
    }

    private bool pickerOpen;
    private bool _pickerOpen
    {
        get => pickerOpen;
        set
        {
            pickerOpen = value;
            if (pickerOpen) return;

            _buttonText = ButtonText;

            if (DateStart is not null)
            {
                DateStart = _dateRange.Start ?? DefaultStart;
                DateStartChanged.InvokeAsync(DateStart.Value);
            }

            if (DateEnd is not null)
            {
                DateEnd = _dateRange.End ?? DefaultEnd;
                DateEndChanged.InvokeAsync(DateEnd.Value);
            }

            OnClose.InvokeAsync(_buttonText);
        }
    }

    private string SelectedMonth => _customDates ? string.Empty : _dateStart.ToString("MMMM");

    private string TitleText => _customDates 
        ? $"{_dateStart.ToString("MMMM dd/yy").Replace('-', '/')} - {_dateEnd.ToString("MMMM dd/yy").Replace('-', '/')}"
        : $"{_allMonths[_dateStart.Month - 1]} {Today.Year}";
    
    private string ButtonText => _customDates
        ? $"{_dateStart.ToString("MMM dd/yy").Replace('-', '/')} - {_dateEnd.ToString("MMM dd/yy").Replace('-', '/')}"
        : $"{_allMonths[_dateStart.Month - 1]} {Today.Year}";
    
    private DateTime Today => DateTime.UtcNow.AddHours(-4);
    private DateTime DefaultStart => new(Today.Year, Today.Month, 1);
    private DateTime DefaultEnd => new(Today.Year, Today.Month, DateTime.DaysInMonth(Today.Year, Today.Month));


    protected override void OnInitialized()
    {
        _dateStart = DefaultStart;
        _dateEnd = DefaultEnd;
        
        // if date start/end values were provided, update internal fields
        {
            if (DateStart.HasValue)
                _dateStart = DateStart.Value;

            if (DateEnd.HasValue)
                _dateEnd = DateEnd.Value;
        }

        _buttonText = ButtonText;
    }
    

    private void OnClick()
    {
        _pickerOpen = true;
        InvokeAsync(StateHasChanged);
    }


    private void OnMonthSelected(string month)
    {
        var monthNum = _allMonths.ToList().IndexOf(month) + 1;
        if (monthNum is < 1 or > 12)
            return;
        
        _dateStart = new DateTime(Today.Year, monthNum, 1);
        _dateEnd = new DateTime(Today.Year, monthNum, DateTime.DaysInMonth(Today.Year, monthNum));
    }

    private RenderFragment PickerContent
        => @<div>
               <div class="pa-2 d-flex justify-center flex-row" style="width: 100%">
                   <MudText Typo="Typo.h6" Color="Color.Primary">@TitleText</MudText>
               </div>
               <div class="mt-2 d-flex justify-center align-center flex-column gap-5">
                   <div>
                       <MudSwitch @bind-Value="_customDates" ThumbIcon="@(_customDates ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(_customDates ? Color.Primary : Color.Error)">Custom</MudSwitch>
                   </div>
                   <div style="height: 40vh">
                       @if (_customDates)
                       {
                           <MudDateRangePicker PickerVariant="PickerVariant.Static" @bind-DateRange="_dateRange" Orientation="Orientation.Landscape" DisplayMonths="1" ShowToolbar="false" Margin="Margin.Dense" Rounded />
                       }
                       else
                       {
                           <MudGrid>
                               @foreach (var month in _allMonths)
                               {
                                   <MudItem xs="6" sm="4" md="3">
                                       <MudButton OnClick="_ => OnMonthSelected(month)" Color="SelectedMonth == month ? Color.Primary : Color.Default" FullWidth>@month</MudButton>
                                   </MudItem>
                               }
                           </MudGrid>
                       }
                   </div>
               </div>
           </div>;

}